# -*- coding: utf-8 -*-
"""LSTMBidirectional

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q8XUmB0TF7zNypR5BJpYD97oEXTzRrjj
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Bidirectional
from tensorflow.keras.optimizers import Adam
from datetime import datetime, timedelta

def fetch_tesla_data(years=5):
    """Fetch TSLA historical stock data"""
    end_date = datetime.today()
    start_date = end_date - timedelta(days=years*365)
    tsla = yf.Ticker("TSLA")
    df = tsla.history(start=start_date, end=end_date)
    return df[['Open', 'High', 'Low', 'Close', 'Volume']]

def prepare_data(data, target_col='Close', n_steps=30):
    """Prepare data for LSTM training"""
    target = data[[target_col]].values
    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_data = scaler.fit_transform(target)

    X, y = [], []
    for i in range(n_steps, len(scaled_data)):
        X.append(scaled_data[i-n_steps:i, 0])
        y.append(scaled_data[i, 0])
    return np.array(X), np.array(y), scaler

def split_and_reshape_data(X, y, test_size=30, n_features=1):
    """Split and reshape data for LSTM"""
    X_train, X_test = X[:-test_size], X[-test_size:]
    y_train, y_test = y[:-test_size], y[-test_size:]

    X_train = X_train.reshape((X_train.shape[0], X_train.shape[1], n_features))
    X_test = X_test.reshape((X_test.shape[0], X_test.shape[1], n_features))
    return X_train, X_test, y_train, y_test

def build_bilstm_model(n_steps, n_features):
    """Build bidirectional LSTM model"""
    model = Sequential()
    model.add(Bidirectional(LSTM(128, return_sequences=False),
                          input_shape=(n_steps, n_features)))
    model.add(Dense(1))
    model.compile(optimizer=Adam(learning_rate=0.01), loss='mse')
    return model

def train_model(model, X_train, y_train, X_test, y_test, epochs=50, batch_size=32):
    """Train model and return history"""
    history = model.fit(
        X_train, y_train,
        validation_data=(X_test, y_test),
        epochs=epochs,
        batch_size=batch_size,
        verbose=1
    )
    return history

def make_predictions(model, X_train, X_test, scaler):
    """Make predictions and inverse scaling"""
    train_predict = model.predict(X_train)
    test_predict = model.predict(X_test)

    train_predict = scaler.inverse_transform(train_predict)
    test_predict = scaler.inverse_transform(test_predict)
    return train_predict, test_predict

def calculate_metrics(y_train, y_test, train_predict, test_predict):
    """Calculate and print RMSE metrics"""
    train_rmse = np.sqrt(mean_squared_error(y_train[0], train_predict[:,0]))
    test_rmse = np.sqrt(mean_squared_error(y_test[0], test_predict[:,0]))
    print(f'Train RMSE: {train_rmse:.2f}')
    print(f'Test RMSE: {test_rmse:.2f}')
    return train_rmse, test_rmse

def plot_training_forecast(dates, actual, predicted, filename="plots/bidirectional_training_results.png"):
    """Plot training data forecast"""
    plt.figure(figsize=(15,6))
    plt.plot(dates, actual[0], label='Actual Prices', color='blue', alpha=0.5)
    plt.plot(dates, predicted[:,0], label='Predicted Prices', color='red', alpha=0.7)
    plt.title('LSTM Bidirectional Training Data Forecast')
    plt.xlabel('Date')
    plt.ylabel('Price ($)')
    plt.legend()
    plt.grid(True)
    plt.savefig(filename)
    plt.show()

def plot_test_forecast(dates, actual, predicted, filename="plots/bidirectional_testing_results.png"):
    """Plot test data forecast"""
    plt.figure(figsize=(15,6))
    plt.plot(dates, actual[0], label='Actual Prices', color='blue')
    plt.plot(dates, predicted[:,0], label='Predicted Prices', color='red')
    plt.title('LSTM Bidirectional Test Data Forecast')
    plt.xlabel('Date')
    plt.ylabel('Price ($)')
    plt.legend()
    plt.grid(True)
    plt.savefig(filename)
    plt.show()

def plot_training_history(history, filename="plots/bidirectional_training_loss.png"):
    """Plot training and validation loss"""
    plt.figure(figsize=(8, 4))
    plt.plot(history.history['loss'], label='Training Loss')
    plt.plot(history.history['val_loss'], label='Validation Loss')
    plt.title('LSTM Bidirectional Training Loss History')
    plt.xlabel('Epochs')
    plt.ylabel('Loss')
    plt.legend()
    plt.grid(True)
    plt.savefig(filename)
    plt.show()

def main():
    # Data pipeline
    tsla_data = fetch_tesla_data()
    print(f"Loaded {len(tsla_data)} days of TSLA data")
    print(tsla_data.tail())

    X, y, scaler = prepare_data(tsla_data)
    X_train, X_test, y_train, y_test = split_and_reshape_data(X, y)

    # Model pipeline
    model = build_bilstm_model(30, 1)
    print(model.summary())

    history = train_model(model, X_train, y_train, X_test, y_test)
    train_predict, test_predict = make_predictions(model, X_train, X_test, scaler)

    # Inverse scaling for y values
    y_train = scaler.inverse_transform([y_train])
    y_test = scaler.inverse_transform([y_test])

    # Evaluation
    calculate_metrics(y_train, y_test, train_predict, test_predict)

    # Visualization
    train_dates = tsla_data.index[30:-30]  # n_steps=30, test_size=30
    test_dates = tsla_data.index[-30:]

    plot_training_forecast(train_dates, y_train, train_predict, filename="plots/bidirectional_training_results.png")
    plot_test_forecast(test_dates, y_test, test_predict, filename="plots/bidirectional_testing_results.png")
    plot_training_history(history, filename="plots/bidirectional_training_loss.png")

if __name__ == '__main__':
    main()